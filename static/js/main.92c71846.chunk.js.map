{"version":3,"sources":["util.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getDigits","num","BoxVariant","Grid","styled","div","Box","props","area","variant","active","App","now","useState","Date","time","setTime","timeout","setTimeout","update","millisUntilNextUpdate","getMilliseconds","useEffect","clearTimeout","useTime","d","getDate","h","getHours","getMinutes","mm","m","getSeconds","ss","s","map","i","Hour","Minute","Second","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAwBO,SAASA,EAAUC,GACtB,MAAO,CAACA,EAAM,IAAM,EAAGA,EAAM,I,QCF5BC,E,OAjBCC,EAAOC,IAAOC,IAAV,ib,SAiBLH,K,cAAAA,E,aAAAA,E,eAAAA,E,aAAAA,M,KAOL,IAAMI,EAAMF,IAAOC,IAAV,0FACM,SAAAE,GAAK,OAAIA,EAAMC,QACR,SAAAD,GAAK,OAAIA,EAAME,WACxB,SAAAF,GAAK,OAAIA,EAAMG,OAAS,GAAM,MA6B5BC,MA1Bf,WACE,IAAMC,EDlCD,WAA0B,IAAD,EACJC,mBAAS,IAAIC,MADT,mBACrBC,EADqB,KACfC,EADe,KAGxBC,EAAUC,YAEd,SAASC,IACL,IAAMP,EAAM,IAAIE,KAChBE,EAAQJ,GACR,IAAMQ,EAAwB,IAAOR,EAAIS,kBAAoB,EAC7DJ,EAAUC,WAAWC,EAAQC,KANA,GAejC,OAJAE,qBAAU,WACN,OAAO,kBAAMC,aAAaN,OAGvBF,ECgBGS,GAENC,EAAIb,EAAIc,UACVC,EAAIf,EAAIgB,WAAa,GACf,IAAND,IACFA,EAAI,IANO,MAOG3B,EAAUY,EAAIiB,cAPjB,mBAONC,EAPM,KAOFC,EAPE,OAQG/B,EAAUY,EAAIoB,cARjB,mBAQNC,EARM,KAQFC,EARE,KAUb,OACE,eAAC/B,EAAD,WACG,CAAC,EAAE,EAAE,EAAE,GAAGgC,KAAI,SAAAC,GAAC,OAAI,qCAClB,cAAC9B,EAAD,CAAKG,QAASP,EAAWY,KAAMN,KAAI,WAAM4B,GAAK1B,OAAQe,EAAIW,IAC1D,cAAC9B,EAAD,CAAKG,QAASP,EAAWmC,KAAM7B,KAAI,WAAM4B,GAAK1B,OAAQiB,EAAIS,IAC1D,cAAC9B,EAAD,CAAKG,QAASP,EAAWoC,OAAQ9B,KAAI,WAAM4B,GAAK1B,OAAQqB,EAAIK,IAC5D,cAAC9B,EAAD,CAAKG,QAASP,EAAWoC,OAAQ9B,KAAI,YAAO4B,GAAK1B,OAAQoB,EAAKM,IAC9D,cAAC9B,EAAD,CAAKG,QAASP,EAAWqC,OAAQ/B,KAAI,WAAM4B,GAAK1B,OAAQwB,EAAIE,IAC5D,cAAC9B,EAAD,CAAKG,QAASP,EAAWqC,OAAQ/B,KAAI,YAAO4B,GAAK1B,OAAQuB,EAAKG,UAGhE,cAAC9B,EAAD,CAAKG,QAASP,EAAWY,KAAMN,KAAK,MAAME,OAAY,GAAJe,QC3CzCe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92c71846.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { MethodSignature } from \"typescript\";\r\n\r\nexport function useTime(): Date {\r\n    const [time, setTime] = useState(new Date())\r\n\r\n    var timeout = setTimeout(update, 0);\r\n\r\n    function update() {\r\n        const now = new Date();\r\n        setTime(now);\r\n        const millisUntilNextUpdate = 1000 - now.getMilliseconds() + 5;\r\n        timeout = setTimeout(update, millisUntilNextUpdate);\r\n    }\r\n\r\n\r\n    // cleanup\r\n    useEffect(() => {\r\n        return () => clearTimeout(timeout);\r\n    });\r\n\r\n    return time;\r\n}\r\n\r\nexport function getDigits(num: number): Array<number> {\r\n    return [num / 10 >> 0, num % 10];\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styled from 'styled-components';\nimport { getDigits, useTime } from './util';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-areas:\n    \". .   .   .  .   .  .\"\n    \". d16 d8  d4 d2  d1 .\"\n    \". h8  mm8 m8 ss8 s8 .\"\n    \". h4  mm4 m4 ss4 s4 .\"\n    \". h2  mm2 m2 ss2 s2 .\"\n    \". h1  mm1 m1 ss1 s1 .\"\n    \". .   .   .  .   .  .\";\n  grid-template-columns: 1fr repeat(5, 17vmin) 1fr;\n  grid-template-rows: 1fr repeat(5, 17vmin) 1fr;\n  width: 100vw;\n  height: 100vh;\n  grid-gap: 2vmin;\n`;\n\nenum BoxVariant {\n  Date = \"purple\",\n  Second = \"red\",\n  Minute = \"green\",\n  Hour = \"blue\"\n}\n\nconst Box = styled.div<{area: string, variant: BoxVariant, active: boolean | number}>`\n  grid-area: ${props => props.area};\n  background-color: ${props => props.variant};\n  opacity: ${props => props.active ? 0.9 : 0.3};\n`;\n\nfunction App() {\n  const now = useTime();\n\n  const d = now.getDate()\n  var h = now.getHours() % 12;\n  if (h === 0)\n    h = 12;\n  const [mm, m] = getDigits(now.getMinutes());\n  const [ss, s] = getDigits(now.getSeconds());\n\n  return (\n    <Grid>\n      {[1,2,4,8].map(i => <>\n        <Box variant={BoxVariant.Date} area={`d${i}`} active={d & i} />\n        <Box variant={BoxVariant.Hour} area={`h${i}`} active={h & i} />\n        <Box variant={BoxVariant.Minute} area={`m${i}`} active={m & i} />\n        <Box variant={BoxVariant.Minute} area={`mm${i}`} active={mm & i} />\n        <Box variant={BoxVariant.Second} area={`s${i}`} active={s & i} />\n        <Box variant={BoxVariant.Second} area={`ss${i}`} active={ss & i} />\n      </>)}\n      {/* date also has 16 bit box */}\n      <Box variant={BoxVariant.Date} area=\"d16\" active={d & 16} />\n    </Grid>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}